package cache

import (
	"log"
	"sync"
	"time"

	"inventory-service/models"

	"gorm.io/gorm"
)

type Cache struct {
	data map[uint]models.Product // üîÅ uint –≤–º–µ—Å—Ç–æ uint64
	mu   sync.RWMutex
	db   *gorm.DB
}

// NewCache —Å–æ–∑–¥–∞—ë—Ç –∫—ç—à –∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
func NewCache(db *gorm.DB) *Cache {
	c := &Cache{
		data: make(map[uint]models.Product),
		db:   db,
	}
	c.LoadFromDB()
	go c.startAutoRefresh()
	return c
}

// LoadFromDB –∑–∞–ø–æ–ª–Ω—è–µ—Ç –∫—ç—à –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
func (c *Cache) LoadFromDB() {
	var items []models.Product
	if err := c.db.Find(&items).Error; err != nil {
		log.Println("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫—ç—à–∞ –∏–∑ –ë–î:", err)
		return
	}

	c.mu.Lock()
	defer c.mu.Unlock()

	c.data = make(map[uint]models.Product) // —Å–±—Ä–æ—Å —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö
	for _, item := range items {
		c.data[item.ID] = item
	}
	log.Printf("[Cache] –ó–∞–≥—Ä—É–∂–µ–Ω–æ %d —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∏–∑ –±–∞–∑—ã", len(c.data))
}

// startAutoRefresh ‚Äî –æ–±–Ω–æ–≤–ª—è–µ—Ç –∫—ç—à –∫–∞–∂–¥—ã–µ 12 —á–∞—Å–æ–≤
func (c *Cache) startAutoRefresh() {
	ticker := time.NewTicker(12 * time.Hour)
	for range ticker.C {
		log.Println("[Cache] –ü–ª–∞–Ω–æ–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ...")
		c.LoadFromDB()
	}
}

// GetAll ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã –∏–∑ –∫—ç—à–∞
func (c *Cache) GetAll() []models.Product {
	c.mu.RLock()
	defer c.mu.RUnlock()

	items := make([]models.Product, 0, len(c.data))
	for _, item := range c.data {
		items = append(items, item)
	}
	return items
}

// GetByID ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—Ä–æ–¥—É–∫—Ç –ø–æ ID
func (c *Cache) GetByID(id uint) (models.Product, bool) {
	c.mu.RLock()
	defer c.mu.RUnlock()

	item, exists := c.data[id]
	return item, exists
}

// Add ‚Äî –¥–æ–±–∞–≤–ª—è–µ—Ç –ø—Ä–æ–¥—É–∫—Ç –≤ –∫—ç—à
func (c *Cache) Add(item models.Product) {
	c.mu.Lock()
	defer c.mu.Unlock()

	c.data[item.ID] = item
}
